const router = require("express").Router();
const { asyncHandler } = require("../../../helpers/asyncHandler");
const wishlistController = require("../../../controllers/client/Wishlist.Controller.js");

/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *   parameters:
 *     AccessTokenHeader:
 *       in: header
 *       name: authorization
 *       required: true
 *       schema:
 *         type: string
 *         example: "Bearer <access_token>"
 *       description: "Access token ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng, ƒë·ªãnh d·∫°ng: Bearer <access_token>"
 */

/**
 * @swagger
 * tags:
 *   - name: Wishlist
 *     description: |
 *       C√°c API trong nh√≥m n√†y y√™u c·∫ßu ng∆∞·ªùi d√πng g·ª≠i access token ƒë·ªÉ x√°c th·ª±c.
 *       
 *       üëâ C√°ch g·ª≠i access token:
 *       - Tr√™n Swagger UI, nh·∫•n n√∫t "Authorize" g√≥c tr√™n ph·∫£i.
 *       - Tr√™n app Android ho·∫∑c khi g·ª≠i request, c·∫ßn ƒë√≠nh k√®m access token trong header nh∆∞ sau:
 *         - req.headers['authorization'] = 'Bearer ' + accessToken
 *       - Ho·∫∑c n·∫øu test b·∫±ng Postman th√¨ v√†o tab Headers v√† th√™m:
 *         - Key: authorization
 *         - Value: Bearer <access_token>
 */

/**
 * @swagger
 * /api/v1/wishlist:
 *   get:
 *     summary: Get wishlist products
 *     description: Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m trong wishlist c·ªßa ng∆∞·ªùi d√πng.
 *     tags: [Wishlist]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AccessTokenHeader'
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         required: false
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         required: false
 *         description: Number of items per page
 *     responses:
 *       200:
 *         description: Success
 *       401:
 *         description: Unauthorized
 */

/**
 * @swagger
 * /api/v1/wishlist:
 *   post:
 *     summary: Add product to wishlist
 *     description: Th√™m s·∫£n ph·∫©m v√†o wishlist c·ªßa ng∆∞·ªùi d√πng.
 *     tags: [Wishlist]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AccessTokenHeader'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               productId:
 *                 type: integer
 *                 example: 101
 *     responses:
 *       200:
 *         description: Product added
 *       401:
 *         description: Unauthorized
 */

/**
 * @swagger
 * /api/v1/wishlist/{productId}:
 *   delete:
 *     summary: Remove product from wishlist
 *     description: Xo√° m·ªôt s·∫£n ph·∫©m kh·ªèi wishlist c·ªßa ng∆∞·ªùi d√πng.
 *     tags: [Wishlist]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AccessTokenHeader'
 *       - in: path
 *         name: productId
 *         schema:
 *           type: integer
 *         required: true
 *         description: ID c·ªßa s·∫£n ph·∫©m c·∫ßn xo√°
 *     responses:
 *       200:
 *         description: Product removed
 *       401:
 *         description: Unauthorized
 */

/**
 * @swagger
 * /api/v1/wishlist:
 *   delete:
 *     summary: Remove all products from wishlist
 *     description: Xo√° to√†n b·ªô s·∫£n ph·∫©m trong wishlist c·ªßa ng∆∞·ªùi d√πng.
 *     tags: [Wishlist]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AccessTokenHeader'
 *     responses:
 *       200:
 *         description: Wishlist cleared
 *       401:
 *         description: Unauthorized
 */

/**
 * @swagger
 * /api/v1/wishlist/count:
 *   get:
 *     summary: Get wishlist count
 *     description: L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong wishlist c·ªßa ng∆∞·ªùi d√πng.
 *     tags: [Wishlist]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/AccessTokenHeader'
 *     responses:
 *       200:
 *         description: Count retrieved
 *       401:
 *         description: Unauthorized
 */





router.get("/", asyncHandler(wishlistController.getProductInWishlist));

router.post("/", asyncHandler(wishlistController.addProductToWishlist));

router.delete("/:productId", asyncHandler(wishlistController.removeProductFromWishlist));

router.post("/remove-many", asyncHandler(wishlistController.removeAllProductFromWishlist));

router.get("/count", asyncHandler(wishlistController.getCountProductInWishlist));


module.exports = router;
